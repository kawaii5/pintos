            +--------------------+
            |       CS 153       |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Palak Parwal  <pparw001@ucr.edu>
Michelle Wang  <mwang016@ucr.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static struct list block_list //in src/threads.h
  This stores the blocked threads to avoid busy waiting.
struct thread *t = thread_current(); //in src/threads.h
  Stores the current thread so that we can change the state of the thread.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

Thread gets blocked until the time has advanced by at least x timer ticks. The tick value is calculated. The timer interrupt handler will update the waiting list of threads, unblocking the threads that are ready to wake.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

Since the list of threads is ordered, the handler does not need to go through the entire list to find the threads to wake. It will only look at one more thread than the number it wakes.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Interrupts are turned off while ticks are calculated, while threads are added to block_list, and when the status of the thread changes to block. 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Ready and block lists are being read and modified which means that the ticks are not being updated which should avoid race conditions.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Since we weren't sure how to begin this portion, we talked to the TA to go over the process. We chose to use a method in which the waiting list was ordered since the unordered list would make it more difficult on the handler. We had to design a way in which to block and unblock the threads without yield.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We have not implemented this portion yet, so none of the data structures have been declared yet.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

The data struture we plan to use will be a donor list of some sort from which we will choose the donor with the highest priority level.

For example:

Threads: A, B, C, D
Locks: E, F, G

E locks A to C //both A and B go to the donor list of C
F locks C to D //C goes to the donor list of D
G locks B to C

C will be given the max priority between itself and the possibilities on it's donor list. The same will occur for D.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

The waiting threads will be ordered by highest priority and reordered each time one is removed, meaning the lock/semaphore will recieve the highest priority thread first.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

If a priority donation is required, the current thread will become a possible donor. Once the current thread is locked, if the lock has a lower priority, the higher one will be given to it, to update it's priority.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

Since the donated priority leaves with the lock, the current thread's priority will be added to the ordered list accordingly. The highest priority thread will take the lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A race condition could occur during the priority change in a priority donation. The interrupt handler can also be writing to the priority at the same time. If this occurs, the writes would be in a race. A lock cannot be used for this because not all of the functions involved will have access to the lock.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We have not completed this design past thoughts. The thoughts were based off of the details discussed in lab that made us think we would need to look into these afore mentioned conditions.

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

The first portion was alright, but the other part was a little more difficult and confusing. It took quite a bit of time to figure out how to implement the solution.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

This assignment gave us a better insight on how threads function.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

Currently we cannot think of any hints that would be useful, but the guidance was good to have.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

We think you are doing just fine!

>> Any other comments?

None.
